package com.honeywell.android.data.generate;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.honeywell.android.data.model.InventoryItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY_ITEM".
*/
public class InventoryItemDao extends AbstractDao<InventoryItem, Long> {

    public static final String TABLENAME = "INVENTORY_ITEM";

    /**
     * Properties of entity InventoryItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ItemID = new Property(0, Long.class, "itemID", true, "_id");
        public final static Property InventoryTaskId = new Property(1, long.class, "inventoryTaskId", false, "INVENTORY_TASK_ID");
        public final static Property EpcID = new Property(2, String.class, "epcID", false, "EPC_ID");
        public final static Property IsCounted = new Property(3, boolean.class, "isCounted", false, "IS_COUNTED");
        public final static Property InventoryTime = new Property(4, long.class, "inventoryTime", false, "INVENTORY_TIME");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property FailedReason = new Property(6, int.class, "failedReason", false, "FAILED_REASON");
    }

    private Query<InventoryItem> inventoryTask_InventoryListQuery;

    public InventoryItemDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: itemID
                "\"INVENTORY_TASK_ID\" INTEGER NOT NULL ," + // 1: inventoryTaskId
                "\"EPC_ID\" TEXT NOT NULL ," + // 2: epcID
                "\"IS_COUNTED\" INTEGER NOT NULL ," + // 3: isCounted
                "\"INVENTORY_TIME\" INTEGER NOT NULL ," + // 4: inventoryTime
                "\"USER_NAME\" TEXT NOT NULL ," + // 5: userName
                "\"FAILED_REASON\" INTEGER NOT NULL );"); // 6: failedReason
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InventoryItem entity) {
        stmt.clearBindings();
 
        Long itemID = entity.getItemID();
        if (itemID != null) {
            stmt.bindLong(1, itemID);
        }
        stmt.bindLong(2, entity.getInventoryTaskId());
        stmt.bindString(3, entity.getEpcID());
        stmt.bindLong(4, entity.getIsCounted() ? 1L: 0L);
        stmt.bindLong(5, entity.getInventoryTime());
        stmt.bindString(6, entity.getUserName());
        stmt.bindString(7, entity.getFailedReason());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InventoryItem entity) {
        stmt.clearBindings();
 
        Long itemID = entity.getItemID();
        if (itemID != null) {
            stmt.bindLong(1, itemID);
        }
        stmt.bindLong(2, entity.getInventoryTaskId());
        stmt.bindString(3, entity.getEpcID());
        stmt.bindLong(4, entity.getIsCounted() ? 1L: 0L);
        stmt.bindLong(5, entity.getInventoryTime());
        stmt.bindString(6, entity.getUserName());
        stmt.bindString(7, entity.getFailedReason());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InventoryItem readEntity(Cursor cursor, int offset) {
        InventoryItem entity = new InventoryItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // itemID
            cursor.getLong(offset + 1), // inventoryTaskId
            cursor.getString(offset + 2), // epcID
            cursor.getShort(offset + 3) != 0, // isCounted
            cursor.getLong(offset + 4), // inventoryTime
            cursor.getString(offset + 5), // userName
            cursor.getString(offset + 6) // failedReason
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InventoryItem entity, int offset) {
        entity.setItemID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInventoryTaskId(cursor.getLong(offset + 1));
        entity.setEpcID(cursor.getString(offset + 2));
        entity.setIsCounted(cursor.getShort(offset + 3) != 0);
        entity.setInventoryTime(cursor.getLong(offset + 4));
        entity.setUserName(cursor.getString(offset + 5));
        entity.setFailedReason(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InventoryItem entity, long rowId) {
        entity.setItemID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InventoryItem entity) {
        if(entity != null) {
            return entity.getItemID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InventoryItem entity) {
        return entity.getItemID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "inventoryList" to-many relationship of InventoryTask. */
    public List<InventoryItem> _queryInventoryTask_InventoryList(long inventoryTaskId) {
        synchronized (this) {
            if (inventoryTask_InventoryListQuery == null) {
                QueryBuilder<InventoryItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InventoryTaskId.eq(null));
                inventoryTask_InventoryListQuery = queryBuilder.build();
            }
        }
        Query<InventoryItem> query = inventoryTask_InventoryListQuery.forCurrentThread();
        query.setParameter(0, inventoryTaskId);
        return query.list();
    }

}
